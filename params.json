{"name":"Fluentlenium","body":"# What is FluentLenium ?\r\n\r\nFluentLenium is a framework that helps you writing [Selenium](http://seleniumhq.org/) tests.\r\nFluentLenium provides you a [fluent interface](http://en.wikipedia.org/wiki/Fluent_interface) to the [Selenium Web Driver](http://seleniumhq.org/docs/03_webdriver.html).\r\nFluentLenium let you use the assertion framework you like, either [jUnit assertions](http://www.junit.org/apidocs/org/junit/Assert.html), [Hamcrest](http://code.google.com/p/hamcrest/wiki/Tutorial) \r\nor [Fest-assert](http://docs.codehaus.org/display/FEST/Fluent+Assertions+Module).\r\n\r\n\r\n# 5 seconds example\r\n```java\r\nimport org.junit.Test;\r\n\r\nimport static org.fest.assertions.Assertions.assertThat;\r\n\r\npublic class BingTest extends FluentTest {\r\n    @Test\r\n    public void title_of_bing_should_contain_search_query_name() {\r\n        goTo(\"http://www.bing.com\");\r\n        fill(\"#sb_form_q\").with(\"FluentLenium\");\r\n        submit(\"#sb_form_go\");\r\n        assertThat(title()).contains(\"FluentLenium\");\r\n    }\r\n}\r\n```\r\n\r\n## Maven\r\n\r\nTo add FluentLenium to your project, just add the following dependency into your `pom.xml`:\r\n\r\n```xml \r\n<dependency>\r\n    <groupId>org.fluentlenium</groupId>\r\n    <artifactId>fluentlenium-core</artifactId>\r\n    <version>0.6.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\nBy default, FluentLenium provide a jUnit adapter.\r\n\r\nIf you need the fest-assert dependency to improve the lisibility of your test code :\r\n\r\n```xml \r\n<dependency>\r\n    <groupId>org.fluentlenium</groupId>\r\n    <artifactId>fluentlenium-festassert</artifactId>\r\n    <version>0.6.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\nAn adapter have been built to use FluentLenium with TestNG :\r\nIf you need the fest-assert dependency to improve the lisibility of your test code :\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>org.fluentlenium</groupId>\r\n    <artifactId>fluentlenium-testng</artifactId>\r\n    <version>0.6.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\nJust extends `org.fluentlenium.adapter.FluentTestNg` instead of `org.fluentlenium.adapter.FluentTest`.\r\n\r\n##Static imports\r\n\r\nIf you need to do some filtering :\r\n\r\n```java\r\nimport static org.fluentlenium.core.filter.FilterConstructor.*;\r\n```\r\n\r\n### Static import using fest assert\r\nThe static assertions to use fest assert\r\n\r\n```java\r\nimport static org.fest.assertions.Assertions.assertThat;\r\nimport static org.fest.assertions.fluentlenium.FluentLeniumAssertions.assertThat;\r\n```\r\n\r\n### Basic Methods\r\nYou can use `url()` , `title()` or `pageSource()` to get the url, the title or the page source of the current page.\r\n\r\n###  Selector\r\n#### Default Selector\r\nYou can use CSS1, CSS2 and CSS3 selector with the same restrictions as in Selenium.\r\n\r\nIf you want to find the list of elements which have\r\n\r\n  - the `id` \"title\" : `find(\"#title\")`\r\n  - the `class` name \"small\" : `find(\".small\")`\r\n  - the `tag` name \"input\" : `find(\"input\")`\r\n\r\nYou are free to use most of the CSS3 syntax, wich means that\r\n`find(\"input[class=rightForm]\")`\r\nwill return the list of all input elements which have the class rightForm\r\n\r\n#### Custom filter\r\nBut what if you want all the input that have a text equals to \"Sam\" ?\r\nYou can use filters to allow that kind of search. For example :\r\n\r\n```java\r\nfind(\".small\", withName(\"foo\"))\r\nfind(\".small\", withId(\"idOne\"))\r\nfind(\".small\", withText(\"This field is mandatory.\"))\r\n```\r\n\r\nYou can also chained filters :\r\n`find(\".small\", withName(\"foo\"), withId(\"id1\"))` will return all the elements matching the 3 criterias.\r\n\r\nIf you want others precisions that just the css selector, just use our filters features.\r\nFor now, you have 6 differents filters :\r\n\r\n  - `contains`\r\n  - `notContains`\r\n  - `startsWith`\r\n  - `notStartsWith`\r\n  - `endsWith`\r\n  - `notEndsWith`\r\n\r\nFor each of them, you can choose to use a css selector :\r\n\r\n```java\r\nfind(\".small\", withName().notContains(\"name\")\r\nfind(\".small\", withId().notStartsWith(\"id\")\r\nfind(\".small\", withText().endsWith(\"Female\"))\r\n```\r\n\r\nOr to be more precise, you can choose to use a regexp :\r\n\r\n```java\r\nfind(\".small\", withName().contains(regex(\"na?me[0-9]*\"))\r\nfind(\".small\", withName().notStartsWith(regex(\"na?me[0-9]*\"))\r\n```\r\n\r\nContains, startsWith and endsWith with a regexp pattern are looking for a subsect of the pattern.\r\n\r\nOf course, if you are a regexp jedi, that's not needed !\r\n\r\nMore will come soon to filter to create a complete search tool (containsWord, able to choose if you want to ignore case ...)\r\n\r\n\r\n### N-th\r\nIf you want the first elements that matchs your criteria, just use :\r\n\r\n```java\r\nfindFirst(myCssSelector)\r\n```\r\n\r\nor alternatively\r\n\r\n```java\r\nfind(myCssSelector).first()\r\n```\r\n\r\nIf you want the element at the given position :\r\n\r\n```java\r\nfind(myCssSelector, 2)\r\n```\r\n\r\nOf course, you can use both position filter and custom filter :\r\n\r\n```java\r\nfind(myCssSelector, 2, withName(\"foo\"))\r\n```\r\n\r\n\r\n#### Find on children\r\nYou can also chained the find call :\r\n`find(myCssSelector).find(\"input\")` will return all the web element input into the css selector tree.\r\nYou can add more indication :\r\n\r\n```java\r\nfind(myCssSelector, 2, withName(\"foo\")).find(\"input\", withName(\"bar\"))\r\n```\r\n\r\nor\r\n\r\n```java\r\nfind(myCssSelector, 2, withName(\"foo\")).findFirst(\"input\", withName(\"bar\"))\r\n```\r\n\r\n## Form Action\r\nIf you need to click, fill, submit or clean an element or a list of element, just go naturally for it.\r\n\r\n### Fill\r\n`fill(\"input\").with(\"bar\")` or `find(\"input\").text(\"bar\")` will fill all the element with tag input with bar. \r\nIf you want for example exclude the checkbox, you can use the css filtering like `fill(\"input:not([type='checkbox'])\").with(\"tomato\")`, \r\nyou can also use the filtering provided by FluentLenium `fill(\"input\", with(\"type\", notContains(\"checkbox\"))).with(\"tomato\")`\r\n\r\n\r\n`fill(\"input\").with(\"myLogin\",\"myPassword\")` will fill the first elements of the input selection with myLogin, the second with myPassword. \r\nIf there are a third input, the last value (myPassword) will be repeat again and again.\r\n\r\nDon't forget, only the visible field will be modified. It simulates your action in a browser !\r\n\r\n### Click\r\n```java\r\nclick(\"#create-button\")\r\n```\r\n\r\nIt will click on all the visible fields returned by the search.\r\n\r\n### Clear\r\n```java\r\nclear(\"#firstname\")\r\n```\r\n\r\nIt will clear  all the visible fields returned by the search.\r\n\r\n### Submit\r\n```java\r\nsubmit(\"#account\")\r\n```\r\n\r\nIt will submit all the visible fields returned by the search.\r\n\r\n\r\n## Page Object pattern\r\nBecause Selenium test can easily become a mess, [Page Object Pattern](http://code.google.com/p/selenium/wiki/PageObjects) when writing automated integration test.\r\nPage Pattern will inclosing all the plumbing, which make tests a lot easier to read and to maintain.\r\n\r\nTry to construct your Page thinking that it is better if you offer services from your page rather that just the internals of the page.\r\nA Page Object can modelize the whole page or just a part of it.\r\n\r\nTo construct a Page, it have to extends [org.fluentlenium.core.FluentPage](https://github.com/FluentLenium/FluentLenium/blob/master/fluentlenium-core/src/main/java/org/fluentlenium/core/FluentPage.java).\r\nIn most of the cases, you have to defined the url of the page with overriding the `getUrl` methods.\r\nIn that way, you can go in your test to that page with `goTo(myPage)`\r\n\r\nTo control that you are in the good page, not only the url [accessible in your test via the void url() method] can be needed.\r\nRedefined the `isAt` methods to list all the assertions you have to make in order to be sure that you are in the good pages.\r\nFor example, if I choose that the title will be sufficient to know if I'm in the page :\r\n\r\n```java\r\n@Override\r\npublic void isAt() {\r\n    assertThat(title()).contains(\"Selenium\");\r\n}\r\n```\r\n\r\nCreate you own methods to easily fill form, go to a next page or what else can be needed in your test.\r\n\r\nFor example :\r\n\r\n```java\r\npublic class LoginPage extends FluentPage {\r\n    public String getUrl() {\r\n        return \"myCustomUrl\";\r\n    }\r\n    public void isAt() {\r\n        assertThat(title()).isEqualTo(\"MyTitle\");\r\n    }\r\n    public void fillAndSubmitForm(String... paramsOrdered) {\r\n        fill(\"input\").with(paramsOrdered);\r\n        click(\"#create-button\");\r\n    }\r\n}\r\n```\r\n\r\nAnd the corresponding test :\r\n\r\n```java\r\npublic void checkLoginFailed() {\r\n\tgoTo(loginPage);\r\n\tloginPage.fillAndSubmitLoginForm(\"login\", \"wrongPass\");\r\n\tloginPage.isAt();\r\n}\r\n```\r\n\r\nOr if you have the [Fest-assert](http://docs.codehaus.org/display/FEST/Fluent+Assertions+Module) module (just make a static import org.fest.assertions.fluentlenium.FluentLeniumAssertions.assertThat)\r\n\r\n```java\r\npublic void checkLoginFailed() {\r\n\tgoTo(loginPage);\r\n\tloginPage.fillAndSubmitLoginForm(\"login\",\"wrongPass\");\r\n\tassertThat(find(\".error\")).hasSize(1);\r\n\tassertThat(loginPage).isAt();\r\n}\r\n```\r\n\r\n###Page usage\r\nYou can use the annotation `@Page` to define your page easily.\r\n\r\nFor example :\r\n\r\n```java\r\npublic class AnnotationInitialization extends FluentTest {\r\n    public WebDriver webDriver = new HtmlUnitDriver();\r\n\r\n    @Page\r\n    public TestPage page;\r\n\r\n\r\n    @Test\r\n    public void test_no_exception() {\r\n        goTo(page);\r\n        //put your assertions here\r\n    }\r\n\r\n\r\n    @Override\r\n    public WebDriver getDefaultDriver() {\r\n        return webDriver;\r\n    }\r\n\r\n}\r\n```\r\n\r\nYou can also used the factory createPage\r\n\r\n```java\r\npublic class BeforeInitialization extends FluentTest {\r\n\tpublic WebDriver webDriver = new HtmlUnitDriver();\r\n\tpublic TestPage page;\r\n\t@Before\r\n\tpublic void beforeTest() {\r\n\t\tpage = createPage(TestPage.class);\r\n\t}\r\n\t@Test\r\n\tpublic void test_no_exception() {\r\n\t\tpage.go();\r\n\t}\r\n\t@Override\r\n\tpublic WebDriver getDefaultDriver() {\r\n\t\treturn webDriver;\r\n\t}\r\n}\r\n```\r\n\r\nInto a page, all FluentWebElement are automatically searched by name or id. For example, if you declare a FluentWebElement named `createButton`, \r\nit will look into the page to a element where `id` is `createButton` or name is `createButton`. \r\nAll elements are proxified which means that the search is really done when you try to access the element.\r\n\r\n```java\r\npublic class LoginPage extends FluentPage {\r\n   FluentWebElement createButton;\r\n   public String getUrl() {\r\n       return \"myCustomUrl\";\r\n   }\r\n   public void isAt() {\r\n       assertThat(title()).isEqualTo(\"MyTitle\");\r\n   }\r\n   public void fillAndSubmitForm(String... paramsOrdered) {\r\n       fill(\"input\").with(paramsOrdered);\r\n       createButton.click();\r\n   }\r\n}\r\n```\r\nIf you need to wait for an element to be present, especially when on an ajax call, you can use the @AjaxElement annotation on the fields :\r\n\r\n```java\r\npublic class LoginPage extends FluentPage {\r\n   @AjaxElement\r\n   FluentWebElement myAjaxElement;\r\n}\r\n```\r\nYou can set the timeout in seconds for the page to throw an error if not found with @AjaxElemet(timeountOnSeconds=3) if you want to wait 3 seconds.\r\nBy default, the timeout is set to one seconds.\r\n\r\n\r\n## Wait for an Ajax Call\r\n\r\nYou can have multiple way to make your driver wait for the result of an asynchronous call.\r\nFluentLenium provides a rich and fluent API in order to help you to handle AJAX call.\r\nIf you want to wait for at most 5 seconds until the number of element corresponding to the until criteria (here the class small) has the requested size.\r\n\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").hasSize(3);\r\n```\r\nThe default wait is 500 ms.\r\n\r\nInstead of hasSize, you can also use `hasText(\"myTextValue\")`, `hasId(\"myId\")`, `hasName(\"myName\")`.\r\nThe `isPresent()` assertion is going to check if there is at most one element on the page corresponding to the filter.\r\n\r\nIf you need to be more precise, you can also use filter on the search :\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").withText(\"myText\").hasSize(3);\r\n```\r\nYou can also use after hasSize() : 'greaterThan(int)', 'lessThan(int)', 'lessThanOrEqualTo(int)', 'greaterThanOrEqualTo(int)' , 'equalTo(int)', 'notEqualTo(int)'\r\n\r\nYou can use `withText(\"myText\")` but also with the same signature withName , `withId(\"myId\")`\r\nYou can also use matcher :\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").withText().startsWith(\"start\").isPresent();\r\n```\r\n     \r\nJust use `startsWith`, `notStartsWith`, `endsWith`, `notEndsWith`, `contains`, `notContains`, `equalTo`.\r\n\r\nIf you need to filter on a custom attribute name, this syntax will help :\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").with(\"myAttribute\").startsWith(\"myValue\").isPresent();\r\n```\r\n\r\n### Polling Every\r\nYou can also defined the polling frequency, for example, if you want to pull every 5 seconds :\r\n ```java\r\nawait().pollingEvery(5, TimeUnit.SECONDS).until(\".small\").with(\"myAttribute\").startsWith(\"myValue\").isPresent();\r\n```\r\nThe default value is 500ms.\r\n\r\nYou can also chain filter in the asynchronous API :\r\n\r\n```java\r\nawait().atMost(5, TimeUnit.SECONDS).until(\".small\").with(\"myAttribute\").startsWith(\"myValue\").with(\"a second attribute\").equalTo(\"my@ndValue\").isPresent();\r\n```\r\n## Alternative Syntax\r\n\r\nIf you are more convenient to the [JQuery](http://jquery.com/) syntax, maybe something like that will be more natural for you:\r\n\r\n```java\r\ngoTo(\"http://mywebpage/\");\r\n$(\"#firstName\").text(\"toto\");\r\n$(\"#create-button\").click();\r\nassertThat(title()).isEqualTo(\"Hello toto\");\r\n```\r\n\r\nBoth syntax are equivalent. Both `$` and `find` methods are aliases.\r\n\r\n\r\n## Execute javascript\r\nIf you need to execute some javascript, just call `executeScript` with your script as parameter.\r\nFor example, if you have a javascript method called change and you want to call them just add this in your test :\r\n\r\n```java\r\nexecuteScript(\"change();\");\r\n```\r\n\r\n## Taking Snapshots\r\nYou can take a snaphost of the browser\r\n```java\r\ndriver.takeScreenShot();\r\n```\r\nThe file will be name by the current timestamp.\r\nYou can of course specify a path and a name using :\r\n```java\r\ndriver.takeScreenShot(pathAndfileName);\r\n```\r\n\r\n## Customize FluentLenium\r\n\r\n### Driver\r\nIf you need to change your driver, just override the `getDefaultDriver` in your test. You can use every driver\r\n\r\n### TimeOut\r\nJust override `getDefaultWait` in your test.\r\n\r\n## FluentLenium and others framework\r\n### jUnit\r\nFluentLenium used jUnit by default. You can use test using [jUnit](http://www.junit.org) assertions, but can of course use others frameworks, \r\nmore fluent, as [Fluent-assert](http://code.google.com/p/fluent-assert/) or [Hamcrest](http://code.google.com/p/hamcrest/).\r\n\r\n```java\r\ngoTo(\"http://mywebpage/\");\r\nfill(\"#firstName\").with(\"toto\");\r\nclick(\"#create-button\");\r\nassertEqual(\"Hello toto\",title());\r\n```\r\n\r\n### Fest-Assert\r\n```java\r\ngoTo(\"http://mywebpage/\");\r\nfill(\"#firstName\").with(\"toto\");\r\nclick(\"#create-button\");\r\nassertThat(title()).isEqualTo(\"Hello toto\");\r\nassertThat(find(myCssSelector)).hasText(\"present text\");\r\nassertThat(find(myCssSelector)).hasNotText(\"not present text\");\r\nassertThat(find(myCssSelecto1)).hasSize(7);\r\nassertThat(find(myCssSelecto2)).hasSize().lessThan(5);\r\nassertThat(find(myCssSelecto2)).hasSize().lessThanOrEqualTo(5);\r\nassertThat(find(myCssSelecto3)).hasSize().greaterThan(2);\r\nassertThat(find(myCssSelecto3)).hasSize().greaterThanOrEqualTo(2);\r\n```\r\n\r\n### Hamcrest\r\n```java\r\ngoTo(\"http://mywebpage/\");\r\nfill(\"#firstName\").with(\"toto\");\r\nclick(\"#create-button\");\r\nassertThat(title(),equalTo(\"Hello toto\"));\r\n```\r\n\r\n### Built by CloudBees\r\n<img src='http://web-static-cloudfront.s3.amazonaws.com/images/badges/BuiltOnDEV.png'/>","tagline":"FluentLenium makes the writing of acceptance testing more easy and in a fluent way using the power of  css selectors. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}